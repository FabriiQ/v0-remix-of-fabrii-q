-- Create the roles table
CREATE TABLE IF NOT EXISTS roles (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL UNIQUE,
    description TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create the permissions table
CREATE TABLE IF NOT EXISTS permissions (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL UNIQUE, -- e.g., 'agents:create', 'users:read', 'chats:delete'
    description TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create a join table for roles and permissions
CREATE TABLE IF NOT EXISTS role_permissions (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    role_id BIGINT NOT NULL REFERENCES roles(id) ON DELETE CASCADE,
    permission_id BIGINT NOT NULL REFERENCES permissions(id) ON DELETE CASCADE,
    UNIQUE(role_id, permission_id)
);

-- Create a join table for users and roles
CREATE TABLE IF NOT EXISTS user_roles (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    role_id BIGINT NOT NULL REFERENCES roles(id) ON DELETE CASCADE,
    UNIQUE(user_id, role_id)
);

-- Add a role_id to the agents table
ALTER TABLE agents ADD COLUMN role_id BIGINT REFERENCES roles(id);

-- Enable RLS for the new tables
ALTER TABLE roles ENABLE ROW LEVEL SECURITY;
ALTER TABLE permissions ENABLE ROW LEVEL SECURITY;
ALTER TABLE role_permissions ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_roles ENABLE ROW LEVEL SECURITY;

-- RLS Policies
-- For now, allow authenticated users to read roles and permissions
CREATE POLICY "Authenticated users can view roles" ON roles FOR SELECT USING (auth.role() = 'authenticated');
CREATE POLICY "Authenticated users can view permissions" ON permissions FOR SELECT USING (auth.role() = 'authenticated');
CREATE POLICY "Authenticated users can view role_permissions" ON role_permissions FOR SELECT USING (auth.role() = 'authenticated');

-- Users can view their own roles
CREATE POLICY "Users can view their own roles" ON user_roles FOR SELECT USING (user_id = auth.uid());

-- Service role can manage everything (will be refined later with permissions)
CREATE POLICY "Service role can manage roles" ON roles FOR ALL USING (auth.role() = 'service_role');
CREATE POLICY "Service role can manage permissions" ON permissions FOR ALL USING (auth.role() = 'service_role');
CREATE POLICY "Service role can manage role_permissions" ON role_permissions FOR ALL USING (auth.role() = 'service_role');
CREATE POLICY "Service role can manage user_roles" ON user_roles FOR ALL USING (auth.role() = 'service_role');

-- Helper function to check if a user has a specific permission
CREATE OR REPLACE FUNCTION has_permission(p_user_id UUID, p_permission_name TEXT)
RETURNS BOOLEAN AS $$
DECLARE
    has_perm BOOLEAN;
BEGIN
    SELECT EXISTS (
        SELECT 1
        FROM user_roles ur
        JOIN role_permissions rp ON ur.role_id = rp.role_id
        JOIN permissions p ON rp.permission_id = p.id
        WHERE ur.user_id = p_user_id AND p.name = p_permission_name
    ) INTO has_perm;
    RETURN has_perm;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Seed initial data for roles and permissions
INSERT INTO roles (name, description) VALUES
('admin', 'Administrator with full access'),
('user', 'Standard user with basic permissions'),
('agent', 'AI agent with specific permissions');

INSERT INTO permissions (name, description) VALUES
('agents:create', 'Create new agents'),
('agents:read', 'Read agent configurations'),
('agents:update', 'Update agent configurations'),
('agents:delete', 'Delete agents'),
('users:create', 'Create new users'),
('users:read', 'Read user information'),
('users:update', 'Update user information'),
('users:delete', 'Delete users'),
('chats:read_all', 'Read all chat conversations'),
('chats:delete', 'Delete chat messages');

-- Assign all permissions to the admin role
INSERT INTO role_permissions (role_id, permission_id)
SELECT
    (SELECT id FROM roles WHERE name = 'admin'),
    p.id
FROM permissions p
ON CONFLICT DO NOTHING;

-- Assign basic permissions to the user role
INSERT INTO role_permissions (role_id, permission_id)
SELECT
    (SELECT id FROM roles WHERE name = 'user'),
    p.id
FROM permissions p
WHERE p.name IN ('agents:read', 'users:read')
ON CONFLICT DO NOTHING;

-- Assign basic permissions to the agent role
INSERT INTO role_permissions (role_id, permission_id)
SELECT
    (SELECT id FROM roles WHERE name = 'agent'),
    p.id
FROM permissions p
WHERE p.name IN ('agents:read')
ON CONFLICT DO NOTHING;